variables:
  PACKAGE: "arm_control"
  ROS_DISTRO: "kinetic"
  CI_SOURCE_PATH: "$CI_PROJECT_DIR"
  WS_DIR: "${CI_PROJECT_NAME}_ws"

before_script:
# before install
#  - echo $CI_SOURCE_PATH
  - export PYTHONIOENCODING=UTF-8
  - shopt -s extglob
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - mkdir -p $WS_DIR/src/$PACKAGE
  - cd $WS_DIR
  - git clone git@gitlab.com:qset_rover/ros_sabertooth.git src/sabertooth
  - git clone git@gitlab.com:qset_rover/ros_position_encoders.git src/cui_encoders
  - catkin init
  - catkin build --no-status
  - cd $CI_PROJECT_DIR
  - mv !($WS_DIR) $WS_DIR/src/$PACKAGE/
  - cd $WS_DIR
  - source devel/setup.bash

  #This is if you configure your rosdep correctly
  #- rosdep update
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

#No Clean up needed in this version
#after_script:
#  - cd ~
#  - rm -r ./catkin_ws
#  - if [ -e $CI_PROJECT_NAME ]; then rm $CI_PROJECT_NAME; else echo "project does not exist";fi

stages:
  - build
  - test
  - lint
#  - clean

build:
  stage: build
  script:
    - catkin build --no-status
    
  tags:
    - QSET
    - ROS
    - ARM

catkin tests:
  stage: test
  tags:
    - QSET
    - ROS
    - ARM
  script: 
    - roscore & PID=$!
    - catkin build arm_control --no-status
    - catkin build arm_control --no-deps --no-status --catkin-make-args run_tests
    - catkin_test_results build --verbose
    - kill $PID

catkin lint:
  stage: lint
  tags:
    - QSET
    - ARM
    - ROS
  script:
    - catkin lint --explain -W2 --strict ./src/$PACKAGE --ignore env_var --ignore link_directory

#clean:
#  stage: clean
#  when: always
#  tags: 
#    - QSET
#  script:
#    - rm -rf $CI_SOURCE_PATH
